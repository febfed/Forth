marker empty1 

vocabulary euler8 
also euler8 definitions 

variable a1 1024 chars allot
variable a2 

: ?eol ( -- f ) source nip >in @ > 0= ; 
: lcount ( a -- b n ) dup cell+ swap @ ;  
: +! ( n a -- ) dup >r @ + r> ! ;
: l+place ( a l b -- ) 2dup 2>r lcount + swap move 2r> +! ; 

: { ( -- ) 
  bl parse 
  dup 0= if 2drop 
    ?eol if 
      refill if recurse else cr abort" Unexpected end ... aborting !" then
      else recurse 
      then   
  else
    2dup s" }" compare 0= if 2drop exit then  
    a1 l+place 
    recurse 
  then ;


0 0 a1 2! 

{ 
73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450
}
 
cr cr 

: zero? ( a l -- ) s" 0" search >r 2drop r> ;  
: multip ( a l -- n ) 1 -rot bounds do i c@ '0' - * loop ;

: adjfour ( -- ) 
  0 a2 ! 
  a1 lcount 
  begin dup 4 > while 
    over 4 2dup zero? if 2drop 
    else multip dup a2 @ > if a2 ! else drop then then 
    1 /string 
  repeat 2drop ; 

adjfour cr .( The value of the product of 4 adjacent digits = ) a2 @ u. 

: adjthirteen ( -- ) 
  0 a2 ! 
  a1 lcount 
  begin dup 13 > while 
    over 13 2dup zero? if 2drop 
    else multip dup a2 @ > if a2 ! else drop then then 
    1 /string 
  repeat 2drop ; 

adjthirteen cr .( The value of the product of 13 adjacent digits = ) a2 @ u.
cr cr cr 
